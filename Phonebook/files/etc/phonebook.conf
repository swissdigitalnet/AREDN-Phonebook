#
# AREDN Phonebook Configuration File
#
# This file allows administrators to customize various operational parameters
# of the AREDN Phonebook system without recompiling the application.
#

# ============================================================================
# PHONEBOOK SETTINGS
# ============================================================================

# Phonebook Fetcher Interval (in seconds)
# The interval at which the phonebook fetcher thread will attempt to download
# the CSV phonebook from the configured servers.
# Default: 3600 (1 hour)
PB_INTERVAL_SECONDS=3600

# Phonebook Servers
# Define the phonebook servers from which the CSV file will be downloaded.
# Each server should be on its own line using the format:
# PHONEBOOK_SERVER=host,port,path
# The application will try servers in the order they appear until a successful download.
# You can add up to MAX_PB_SERVERS (currently 5) entries.
PHONEBOOK_SERVER=hb9bla-vm-tunnelserver.local.mesh,80,/filerepo/Phonebook/AREDN_Phonebook.csv
PHONEBOOK_SERVER=hb9edi-vm-gw.local.mesh,80,/filerepo/Phonebook/AREDN_Phonebook.csv


# ============================================================================
# PHONEBOOK SERVICE SETTINGS
# ============================================================================

# Status Update Interval (in seconds)
# The interval at which the status updater thread will check for phonebook changes
# and update the active/inactive status of registered users.
# Default: 600 (10 minutes)
STATUS_UPDATE_INTERVAL_SECONDS=600


# ============================================================================
# MONITORING SETTINGS (Phone Connectivity Testing)
# ============================================================================

# Phone Test Interval (in seconds)
# The interval at which the phone bulk test thread will test all reachable phones.
# Set to 0 to disable monitoring completely.
# Default: 600 (10 minutes)
PHONE_TEST_INTERVAL_SECONDS=600

# Phone Ping Test Settings (ICMP - Network Layer)
# Number of ICMP ping requests to send per phone for latency measurement.
# Tests network-layer connectivity and measures RTT/jitter at the IP level.
# Set to 0 to disable ICMP ping testing.
# Range: 0-20
# Default: 5
PHONE_PING_COUNT=5

# Phone Options Test Settings (SIP OPTIONS - Application Layer)
# Number of SIP OPTIONS requests to send per phone for latency measurement.
# Tests application-layer connectivity and measures RTT/jitter at the SIP level.
# Each OPTIONS request measures round-trip time. Multiple requests allow jitter calculation.
# Set to 0 to disable OPTIONS testing.
# Range: 0-20
# Default: 5
PHONE_OPTIONS_COUNT=5

# Phone Call Test (INVITE - rings phone briefly)
# Enable/disable the INVITE call test that actually rings phones.
# Only used as fallback if both ping and options tests fail.
# 0 = disabled, 1 = enabled
# Default: 0 (disabled - recommended to avoid disturbing users)
PHONE_CALL_TEST_ENABLED=0


# ============================================================================
# HEALTH REPORTING SETTINGS (Chapter 5: Health Reporting)
# ============================================================================

# Local Health Reporting
# Enable/disable writing health status to /tmp/software_health.json for local dashboard.
# This file is used by the AREDNmon HTML dashboard to display software health metrics.
# 0 = disabled, 1 = enabled
# Default: 1 (enabled)
HEALTH_LOCAL_REPORTING=1

# Local Health Update Interval (in seconds)
# How often to update the local health status file (/tmp/software_health.json).
# This controls the refresh rate for the AREDNmon dashboard health display.
# Range: 1-3600
# Default: 60 (1 minute)
HEALTH_LOCAL_UPDATE_SECONDS=60

# Remote Collector Reporting
# Enable/disable HTTP POST reporting to remote collector.
# When enabled, health reports are sent to COLLECTOR_URL based on events
# (CPU spikes, memory increases, crashes, etc.) and a baseline heartbeat.
# 0 = disabled, 1 = enabled
# Default: 0 (disabled - enable only if you have a collector deployed)
COLLECTOR_ENABLED=0

# Collector URL
# The HTTP endpoint where health reports should be POSTed.
# Must be an HTTP URL (HTTPS not supported).
# Format: http://hostname:port/path
# Default: http://pi-collector.local.mesh:5000/ingest
COLLECTOR_URL=http://pi-collector.local.mesh:5000/ingest

# Collector HTTP Timeout (in seconds)
# Timeout for HTTP POST requests to the collector.
# Range: 1-60
# Default: 10
COLLECTOR_TIMEOUT_SECONDS=10

# Health Report Baseline Interval (in hours)
# Baseline heartbeat interval for event-driven reporting.
# Even if no health events occur, a report will be sent every N hours.
# Range: 1-24
# Default: 4 (4 hours)
HEALTH_REPORT_BASELINE_HOURS=4

# CPU Spike Threshold (percentage)
# Report health when CPU usage changes by more than this percentage.
# Example: If CPU was 5% and jumps to 30%, a 25% spike triggers reporting.
# Range: 1.0-100.0
# Default: 20.0
HEALTH_CPU_THRESHOLD_PCT=20.0

# Memory Increase Threshold (megabytes)
# Report health when memory usage increases by more than this amount.
# Example: If memory was 8MB and grows to 20MB, a 12MB increase triggers reporting.
# Range: 1.0-100.0
# Default: 10.0
HEALTH_MEMORY_THRESHOLD_MB=10.0

# Health Score Drop Threshold (points)
# Report health when the health score drops by more than this amount.
# Health score ranges from 0-100, with deductions for CPU, memory, crashes, etc.
# Example: If score was 95 and drops to 75, a 20-point drop triggers reporting.
# Range: 1.0-100.0
# Default: 15.0
HEALTH_SCORE_THRESHOLD=15.0

# Crash Reporting
# Enable/disable crash detection and reporting.
# When enabled, the system installs signal handlers to detect crashes
# (SIGSEGV, SIGBUS, SIGFPE, SIGABRT, SIGILL) and save crash context.
# 0 = disabled, 1 = enabled
# Default: 1 (enabled)
CRASH_REPORTING_ENABLED=1
