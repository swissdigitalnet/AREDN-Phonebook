#!/bin/sh
# AREDNmon - AREDN Mesh Network Monitor
# Displays network monitoring results from automated bulk test cycles
# The bulk test runs automatically every UAC_TEST_INTERVAL_SECONDS (default: 600s)
# Usage: curl "http://node/cgi-bin/arednmon"

echo "Content-Type: text/html; charset=utf-8"
echo ""

# Get configuration
CONFIG_FILE="/etc/phonebook.conf"
TEST_INTERVAL=$(grep "^UAC_TEST_INTERVAL_SECONDS=" "$CONFIG_FILE" 2>/dev/null | cut -d'=' -f2)
TEST_INTERVAL=${TEST_INTERVAL:-60}

# HTML Header
cat <<'EOF'
<!DOCTYPE html>
<html>
<head>
    <title>AREDNmon - Network Monitor</title>
    <meta http-equiv="refresh" content="30">
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            background-color: #f5f5f5;
        }
        h1 {
            color: #333;
        }
        .info {
            background-color: #e7f3fe;
            border-left: 4px solid #2196F3;
            padding: 10px;
            margin-bottom: 20px;
        }
        table {
            border-collapse: collapse;
            width: 100%;
            background-color: white;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        th {
            background-color: #4CAF50;
            color: white;
            padding: 12px;
            text-align: left;
            font-weight: bold;
        }
        td {
            padding: 10px;
            border-bottom: 1px solid #ddd;
        }
        tr:hover {
            background-color: #f5f5f5;
        }
        .online {
            color: #4CAF50;
            font-weight: bold;
        }
        .offline {
            color: #f44336;
            font-weight: bold;
        }
        .no-dns {
            color: #999;
        }
        .disabled {
            color: #999;
        }
        .rtt-good {
            color: #4CAF50;
        }
        .rtt-medium {
            color: #FF9800;
        }
        .rtt-poor {
            color: #f44336;
        }
        .loading {
            text-align: center;
            padding: 20px;
            color: #666;
        }
        .error {
            background-color: #ffebee;
            border-left: 4px solid #f44336;
            padding: 10px;
            margin: 20px 0;
            color: #c62828;
        }
    </style>
</head>
<body>
    <h1>AREDNmon - Network Monitor</h1>
EOF

cat <<EOF
    <div class="info" id="info">
        <strong>Automatic Testing:</strong> Tests run every $TEST_INTERVAL seconds<br>
        <strong>Last Update:</strong> <span id="lastUpdate">Loading...</span><br>
        <strong>Auto-refresh:</strong> This page refreshes every 30 seconds
    </div>

    <div id="errorContainer"></div>

    <table>
        <thead>
            <tr>
                <th>Phone Number</th>
                <th>Name</th>
                <th>Ping Status</th>
                <th>Ping RTT (ms)</th>
                <th>Ping Jitter (ms)</th>
                <th>OPTIONS Status</th>
                <th>OPTIONS RTT (ms)</th>
                <th>OPTIONS Jitter (ms)</th>
            </tr>
        </thead>
        <tbody id="results">
            <tr><td colspan="8" class="loading">Loading test results...</td></tr>
        </tbody>
    </table>

    <script>
        // Phonebook data (loaded from server)
        let phonebook = {};

        // Load phonebook data
        async function loadPhonebook() {
            try {
                const response = await fetch('/cgi-bin/showphonebook');
                const data = await response.json();

                if (data.entries && data.entries.length > 0) {
                    data.entries.forEach(entry => {
                        // Extract phone number without @routing suffix
                        const phoneNumber = entry.telephone.split('@')[0];
                        phonebook[phoneNumber] = entry.name.trim();
                    });
                }
            } catch (error) {
                console.error('Failed to load phonebook:', error);
            }
        }

        // Get display name for a phone number
        function getDisplayName(phoneNumber) {
            // Strip any @routing suffix from phone number
            const cleanNumber = phoneNumber.split('@')[0];
            return phonebook[cleanNumber] || phoneNumber;
        }

        // Get CSS class for status
        function getStatusClass(status) {
            if (status === 'ONLINE') return 'online';
            if (status === 'OFFLINE') return 'offline';
            if (status === 'NO_DNS' || status === 'NO DNS') return 'no-dns';
            if (status === 'DISABLED') return 'disabled';
            return '';
        }

        // Get CSS class for RTT
        function getRttClass(rtt) {
            if (rtt <= 0) return '';
            if (rtt > 200) return 'rtt-poor';
            if (rtt > 100) return 'rtt-medium';
            return 'rtt-good';
        }

        // Format RTT value
        function formatRtt(value) {
            if (value <= 0) return '-';
            return value.toFixed(2);
        }

        // Load and display test results
        async function loadResults() {
            try {
                const response = await fetch('/cgi-bin/uac_test_db_json');
                const data = await response.json();

                if (data.error) {
                    document.getElementById('errorContainer').innerHTML =
                        '<div class="error">Error: ' + data.error + '</div>';
                    document.getElementById('results').innerHTML =
                        '<tr><td colspan="8" class="loading">No test data available yet</td></tr>';
                    return;
                }

                // Update last update time
                if (data.last_update) {
                    const lastUpdate = new Date(data.last_update * 1000);
                    document.getElementById('lastUpdate').textContent = lastUpdate.toLocaleString();
                }

                // Build table rows
                const tbody = document.getElementById('results');
                tbody.innerHTML = '';

                if (data.results && data.results.length > 0) {
                    data.results.forEach(result => {
                        const row = document.createElement('tr');
                        const displayName = getDisplayName(result.phone_number);

                        row.innerHTML =
                            '<td>' + result.phone_number + '</td>' +
                            '<td>' + displayName + '</td>' +
                            '<td class="' + getStatusClass(result.ping_status) + '">' + result.ping_status + '</td>' +
                            '<td class="' + getRttClass(result.ping_rtt) + '">' + formatRtt(result.ping_rtt) + '</td>' +
                            '<td>' + formatRtt(result.ping_jitter) + '</td>' +
                            '<td class="' + getStatusClass(result.options_status) + '">' + result.options_status + '</td>' +
                            '<td class="' + getRttClass(result.options_rtt) + '">' + formatRtt(result.options_rtt) + '</td>' +
                            '<td>' + formatRtt(result.options_jitter) + '</td>';

                        tbody.appendChild(row);
                    });
                } else {
                    tbody.innerHTML = '<tr><td colspan="8" class="loading">No test results available</td></tr>';
                }
            } catch (error) {
                console.error('Failed to load results:', error);
                document.getElementById('errorContainer').innerHTML =
                    '<div class="error">Failed to load test results: ' + error.message + '</div>';
                document.getElementById('results').innerHTML =
                    '<tr><td colspan="8" class="loading">Error loading results</td></tr>';
            }
        }

        // Initialize page
        async function init() {
            await loadPhonebook();
            await loadResults();
        }

        // Run on page load
        init();
    </script>
EOF

# HTML Footer
cat <<'EOF'

    <br>
    <div class="info">
        <strong>Legend:</strong><br>
        <span class="online">● ONLINE</span> - Phone responded to test<br>
        <span class="offline">● OFFLINE</span> - Phone did not respond (DNS resolved but no response)<br>
        <span class="no-dns">● NO DNS</span> - Phone hostname does not resolve (node not on mesh)<br>
        <span class="disabled">● DISABLED</span> - Test disabled in configuration<br>
        <br>
        <strong>RTT Color Coding:</strong><br>
        <span class="rtt-good">● Green</span> - Good (&lt;100ms)<br>
        <span class="rtt-medium">● Orange</span> - Medium (100-200ms)<br>
        <span class="rtt-poor">● Red</span> - Poor (&gt;200ms)<br>
    </div>
</body>
</html>
EOF
