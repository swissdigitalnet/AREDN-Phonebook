name: Build OpenWRT .ipk Package

on:
  # when you push a tag like "v1.2.3" (or "1.2.3")
  push:
    tags:
      - '*.*.*'
    branches:
      - 'development'
      - 'UAC'
      - 'dev-*'
  pull_request:

permissions:
  contents: write   # needed to create releases
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      matrix:
        target:
          - arch: ath79
            subtarget: generic
          - arch: x86
            subtarget: 64
          # - arch: ipq40xx
          #   subtarget: generic

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up SDK URL
        id: sdk
        run: |
          if [[ "${{ matrix.target.arch }}" == "ath79" ]]; then
            echo "sdk_url=https://downloads.openwrt.org/releases/23.05.3/targets/ath79/generic/openwrt-sdk-23.05.3-ath79-generic_gcc-12.3.0_musl.Linux-x86_64.tar.xz" >> $GITHUB_OUTPUT
          elif [[ "${{ matrix.target.arch }}" == "ipq40xx" ]]; then
            echo "sdk_url=https://downloads.openwrt.org/releases/23.05.3/targets/ipq40xx/generic/openwrt-sdk-23.05.3-ipq40xx-generic_gcc-12.3.0_musl_eabi.Linux-x86_64.tar.xz" >> $GITHUB_OUTPUT
          else
            echo "sdk_url=https://downloads.openwrt.org/releases/23.05.3/targets/x86/64/openwrt-sdk-23.05.3-x86-64_gcc-12.3.0_musl.Linux-x86_64.tar.xz" >> $GITHUB_OUTPUT
          fi

      - name: Download and extract SDK
        run: |
          echo "Downloading SDK (this may take a few minutes)..."
          wget --progress=bar:force "${{ steps.sdk.outputs.sdk_url }}" -O sdk.tar.xz
          echo "Extracting SDK..."
          tar -xf sdk.tar.xz --checkpoint=1000 --checkpoint-action=echo
          mv openwrt-sdk-* sdk
          echo "SDK ready for build"

      - name: Inject AREDN-Phonebook package
        run: |
          mkdir -p sdk/package/AREDN-Phonebook
          cp -r Phonebook/* sdk/package/AREDN-Phonebook/

          # Verify Makefile was copied correctly
          echo "Verifying Makefile:"
          if [ -f sdk/package/AREDN-Phonebook/Makefile ]; then
            echo "✓ Makefile found"
            head -15 sdk/package/AREDN-Phonebook/Makefile
          else
            echo "✗ Makefile missing!"
            ls -la sdk/package/AREDN-Phonebook/
            exit 1
          fi

          # Verify all source files are present
          echo "Verifying source structure:"
          find sdk/package/AREDN-Phonebook/src -name "*.c" -o -name "*.h" | sort

          # Check if package is recognized
          echo "Testing package recognition:"
          cd sdk && make package/AREDN-Phonebook/info V=s || echo "Package info failed"

      - name: Build package
        run: |
          cd sdk
          make defconfig

          # Show available packages first
          echo "Available packages in SDK:"
          find package -name "Makefile" | head -10

          # Show our package structure
          echo "Our package structure:"
          find package/AREDN-Phonebook -type f | head -20

          # Show package info
          echo "Building AREDN-Phonebook package for ${{ matrix.target.arch }}..."

          # Build with maximum debugging to see compilation errors
          echo "Starting compilation with full debugging..."
          echo "First, let's see if the package is recognized:"
          make package/AREDN-Phonebook/info V=99 || echo "Package info failed"

          echo "Now attempting compilation with full verbosity:"
          if ! make package/AREDN-Phonebook/compile V=99 -j1 2>&1 | tee build.log; then
            echo "BUILD FAILED! Full build log:"
            cat build.log
            echo "=== Checking for compilation errors ==="
            grep -n -A5 -B5 -i "error\|fail\|undefined\|cannot\|missing" build.log || echo "No obvious errors found"
            echo "=== Checking build directory ==="
            find build_dir -name "*AREDN-Phonebook*" -o -name "*phonebook*" 2>/dev/null || echo "No AREDN-Phonebook build dir found"
            echo "=== Checking if any C files were processed ==="
            find . -name "*.o" | head -10
            exit 1
          fi

          # Show build results
          echo "Build completed! Searching for IPK files..."
          find bin -name "*.ipk" -ls || echo "No IPK files found in bin/"

      # Find and rename the built IPK file
      - name: Find IPK file
        id: find_ipk
        run: |
          echo "Searching for AREDN-Phonebook IPK file..."
          # Look for our AREDN-Phonebook package specifically
          IPK_FILE=$(find sdk/bin -name "*AREDN-Phonebook*.ipk" | head -n 1)

          if [ -z "$IPK_FILE" ]; then
            echo "AREDN-Phonebook IPK not found! Checking all IPK files:"
            find sdk/bin -name "*.ipk" -type f
            echo "Maybe the package name is different. Checking non-library IPKs:"
            find sdk/bin -name "*.ipk" -not -name "lib*" -type f
            # Try to find any IPK that's not a standard library
            IPK_FILE=$(find sdk/bin -name "*.ipk" -not -name "lib*" -type f | head -n 1)
          fi

          if [ -z "$IPK_FILE" ]; then
            echo "ERROR: No suitable IPK file found!"
            exit 1
          fi

          # Rename IPK file to include architecture
          ARCH_IPK="AREDN-Phonebook-${{ matrix.target.arch }}-${{ github.ref_name }}.ipk"
          cp "$IPK_FILE" "$ARCH_IPK"

          echo "ipk_path=$ARCH_IPK" >> $GITHUB_OUTPUT
          echo "Original IPK: $IPK_FILE"
          echo "Renamed to: $ARCH_IPK"
          ls -la "$ARCH_IPK"

      # Upload IPK as artifact for development builds
      - name: Upload IPK as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: AREDN-Phonebook-${{ matrix.target.arch }}-${{ github.ref_name }}
          path: ${{ steps.find_ipk.outputs.ipk_path }}
          retention-days: 30

      # Upload IPK file to release (only for tags)
      - name: Upload IPK to Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: ${{ steps.find_ipk.outputs.ipk_path }}
          name: AREDN SIP Server ${{ github.ref_name }}
          body: |
            AREDN Phonebook SIP Server Release ${{ github.ref_name }}

            ## Architecture Support
            - ath79/generic (MikroTik devices)
            - x86/64 (Intel devices)
            - ipq40xx/generic (AREDN mesh devices)

            ## Features
            - Passive safety self-healing system
            - Automatic resource management
            - Thread recovery monitoring
            - Smart file operations with rollback
            - Enhanced reliability for emergency operations

            ## Installation
            ```bash
            # Download appropriate IPK for your architecture
            opkg install sipserver-*.ipk
            ```
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
